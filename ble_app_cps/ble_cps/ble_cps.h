/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.2.4' (BDS version 1.1.3139.0) */

#ifndef BLE_CPS_H__
#define BLE_CPS_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble.h"
#include "ble_srv_common.h"
#include "app_util_bds.h"


// Error codes 
#define INAPPOPROPRIATE_CONNECTION_PARAMETERS 0x80; /* The notifications of the Cycling Power Vector characteristic cannot be sent due to inappropriate connection parameters. */

/**@brief Cycling Power event type. */
typedef enum
{ 
    BLE_CPS_CYCLING_POWER_MEASUREMENT_EVT_NOTIFICATION_ENABLED,  /**< Cycling Power Measurement value notification enabled event. */
    BLE_CPS_CYCLING_POWER_MEASUREMENT_EVT_NOTIFICATION_DISABLED, /**< Cycling Power Measurement value notification disabled event. */
    BLE_CPS_CYCLING_POWER_MEASUREMENT_EVT_CCCD_WRITE, /**< Cycling Power Measurement CCCD write event. */
    BLE_CPS_CYCLING_POWER_FEATURE_EVT_NOTIFICATION_ENABLED,  /**< Cycling Power Feature value notification enabled event. */
    BLE_CPS_CYCLING_POWER_FEATURE_EVT_NOTIFICATION_DISABLED, /**< Cycling Power Feature value notification disabled event. */
    BLE_CPS_SENSOR_LOCATION_EVT_NOTIFICATION_ENABLED,  /**< Sensor Location value notification enabled event. */
    BLE_CPS_SENSOR_LOCATION_EVT_NOTIFICATION_DISABLED, /**< Sensor Location value notification disabled event. */
    BLE_CPS_CYCLING_POWER_VECTOR_EVT_NOTIFICATION_ENABLED,  /**< Cycling Power Vector value notification enabled event. */
    BLE_CPS_CYCLING_POWER_VECTOR_EVT_NOTIFICATION_DISABLED, /**< Cycling Power Vector value notification disabled event. */
    BLE_CPS_CYCLING_POWER_VECTOR_EVT_CCCD_WRITE, /**< Cycling Power Vector CCCD write event. */
    BLE_CPS_CYCLING_POWER_CONTROL_POINT_EVT_NOTIFICATION_ENABLED,  /**< Cycling Power Control Point value notification enabled event. */
    BLE_CPS_CYCLING_POWER_CONTROL_POINT_EVT_NOTIFICATION_DISABLED, /**< Cycling Power Control Point value notification disabled event. */
    BLE_CPS_CYCLING_POWER_CONTROL_POINT_EVT_CCCD_WRITE, /**< Cycling Power Control Point CCCD write event. */
    BLE_CPS_CYCLING_POWER_CONTROL_POINT_EVT_WRITE, /**< Cycling Power Control Point write event. */
} ble_cps_evt_type_t;

// Forward declaration of the ble_cps_t type.
typedef struct ble_cps_s ble_cps_t;


typedef enum
{ 
    CYCLING_POWER_PROPERTIES_BIT_0_BROADCASTS_DISABLED = 0, 
    CYCLING_POWER_PROPERTIES_BIT_0_BROADCASTS_ENABLED = 1, 
} enum_properties_cycling_power_properties_bit_0_t;

typedef struct
{
    enum_properties_cycling_power_properties_bit_0_t cycling_power_properties_bit_0; 
} cps_server_characteristic_configuration_properties_t; 


/**@brief Server Characteristic Configuration structure. */
typedef struct
{
    cps_server_characteristic_configuration_properties_t properties;
} ble_cps_server_characteristic_configuration_t;



typedef enum
{ 
    PEDAL_POWER_BALANCE_PRESENT_FALSE = 0, 
    PEDAL_POWER_BALANCE_PRESENT_TRUE = 1, 
} enum_flags_pedal_power_balance_present_t;

typedef enum
{ 
    PEDAL_POWER_BALANCE_REFERENCE_UNKNOWN = 0, 
    PEDAL_POWER_BALANCE_REFERENCE_LEFT = 1, 
} enum_flags_pedal_power_balance_reference_t;

typedef enum
{ 
    ACCUMULATED_TORQUE_PRESENT_FALSE = 0, 
    ACCUMULATED_TORQUE_PRESENT_TRUE = 1, 
} enum_flags_accumulated_torque_present_t;

typedef enum
{ 
    ACCUMULATED_TORQUE_SOURCE_WHEEL_BASED = 0, 
    ACCUMULATED_TORQUE_SOURCE_CRANK_BASED = 1, 
} enum_flags_accumulated_torque_source_t;

typedef enum
{ 
    WHEEL_REVOLUTION_DATA_PRESENT_FALSE = 0, 
    WHEEL_REVOLUTION_DATA_PRESENT_TRUE = 1, 
} enum_flags_wheel_revolution_data_present_t;

typedef enum
{ 
    CRANK_REVOLUTION_DATA_PRESENT_FALSE = 0, 
    CRANK_REVOLUTION_DATA_PRESENT_TRUE = 1, 
} enum_flags_crank_revolution_data_present_t;

typedef enum
{ 
    EXTREME_FORCE_MAGNITUDES_PRESENT_FALSE = 0, 
    EXTREME_FORCE_MAGNITUDES_PRESENT_TRUE = 1, 
} enum_flags_extreme_force_magnitudes_present_t;

typedef enum
{ 
    EXTREME_TORQUE_MAGNITUDES_PRESENT_FALSE = 0, 
    EXTREME_TORQUE_MAGNITUDES_PRESENT_TRUE = 1, 
} enum_flags_extreme_torque_magnitudes_present_t;

typedef enum
{ 
    EXTREME_ANGLES_PRESENT_FALSE = 0, 
    EXTREME_ANGLES_PRESENT_TRUE = 1, 
} enum_flags_extreme_angles_present_t;

typedef enum
{ 
    TOP_DEAD_SPOT_ANGLE_PRESENT_FALSE = 0, 
    TOP_DEAD_SPOT_ANGLE_PRESENT_TRUE = 1, 
} enum_flags_top_dead_spot_angle_present_t;

typedef enum
{ 
    BOTTOM_DEAD_SPOT_ANGLE_PRESENT_FALSE = 0, 
    BOTTOM_DEAD_SPOT_ANGLE_PRESENT_TRUE = 1, 
} enum_flags_bottom_dead_spot_angle_present_t;

typedef enum
{ 
    ACCUMULATED_ENERGY_PRESENT_FALSE = 0, 
    ACCUMULATED_ENERGY_PRESENT_TRUE = 1, 
} enum_flags_accumulated_energy_present_t;

typedef enum
{ 
    OFFSET_COMPENSATION_INDICATOR__FALSE = 0, 
    OFFSET_COMPENSATION_INDICATOR__TRUE = 1, 
} enum_flags_offset_compensation_indicator__t;

typedef struct
{
    enum_flags_pedal_power_balance_present_t pedal_power_balance_present; 
    enum_flags_pedal_power_balance_reference_t pedal_power_balance_reference; 
    enum_flags_accumulated_torque_present_t accumulated_torque_present; 
    enum_flags_accumulated_torque_source_t accumulated_torque_source; 
    enum_flags_wheel_revolution_data_present_t wheel_revolution_data_present; 
    enum_flags_crank_revolution_data_present_t crank_revolution_data_present; 
    enum_flags_extreme_force_magnitudes_present_t extreme_force_magnitudes_present; 
    enum_flags_extreme_torque_magnitudes_present_t extreme_torque_magnitudes_present; 
    enum_flags_extreme_angles_present_t extreme_angles_present; 
    enum_flags_top_dead_spot_angle_present_t top_dead_spot_angle_present; 
    enum_flags_bottom_dead_spot_angle_present_t bottom_dead_spot_angle_present; 
    enum_flags_accumulated_energy_present_t accumulated_energy_present; 
    enum_flags_offset_compensation_indicator__t offset_compensation_indicator_; 
} cycling_power_measurement_flags_t; 
typedef enum
{ 
    PEDAL_POWER_BALANCE_SUPPORTED_FALSE = 0, 
    PEDAL_POWER_BALANCE_SUPPORTED_TRUE = 1, 
} enum_cycling_power_feature_pedal_power_balance_supported_t;

typedef enum
{ 
    ACCUMULATED_TORQUE_SUPPORTED_FALSE = 0, 
    ACCUMULATED_TORQUE_SUPPORTED_TRUE = 1, 
} enum_cycling_power_feature_accumulated_torque_supported_t;

typedef enum
{ 
    WHEEL_REVOLUTION_DATA_SUPPORTED_FALSE = 0, 
    WHEEL_REVOLUTION_DATA_SUPPORTED_TRUE = 1, 
} enum_cycling_power_feature_wheel_revolution_data_supported_t;

typedef enum
{ 
    CRANK_REVOLUTION_DATA_SUPPORTED_FALSE = 0, 
    CRANK_REVOLUTION_DATA_SUPPORTED_TRUE = 1, 
} enum_cycling_power_feature_crank_revolution_data_supported_t;

typedef enum
{ 
    EXTREME_MAGNITUDES_SUPPORTED_FALSE = 0, 
    EXTREME_MAGNITUDES_SUPPORTED_TRUE = 1, 
} enum_cycling_power_feature_extreme_magnitudes_supported_t;

typedef enum
{ 
    EXTREME_ANGLES_SUPPORTED_FALSE = 0, 
    EXTREME_ANGLES_SUPPORTED_TRUE = 1, 
} enum_cycling_power_feature_extreme_angles_supported_t;

typedef enum
{ 
    TOP_AND_BOTTOM_DEAD_SPOT_ANGLES_SUPPORTED_FALSE = 0, 
    TOP_AND_BOTTOM_DEAD_SPOT_ANGLES_SUPPORTED_TRUE = 1, 
} enum_cycling_power_feature_top_and_bottom_dead_spot_angles_supported_t;

typedef enum
{ 
    ACCUMULATED_ENERGY_SUPPORTED_FALSE = 0, 
    ACCUMULATED_ENERGY_SUPPORTED_TRUE = 1, 
} enum_cycling_power_feature_accumulated_energy_supported_t;

typedef enum
{ 
    OFFSET_COMPENSATION_INDICATOR_SUPPORTED_FALSE = 0, 
    OFFSET_COMPENSATION_INDICATOR_SUPPORTED_TRUE = 1, 
} enum_cycling_power_feature_offset_compensation_indicator_supported_t;

typedef enum
{ 
    OFFSET_COMPENSATION_SUPPORTED_FALSE = 0, 
    OFFSET_COMPENSATION_SUPPORTED_TRUE = 1, 
} enum_cycling_power_feature_offset_compensation_supported_t;

typedef enum
{ 
    CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_CONTENT_MASKING_SUPPORTED_FALSE = 0, 
    CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_CONTENT_MASKING_SUPPORTED_TRUE = 1, 
} enum_cycling_power_feature_cycling_power_measurement_characteristic_content_masking_supported_t;

typedef enum
{ 
    MULTIPLE_SENSOR_LOCATIONS_SUPPORTED_FALSE = 0, 
    MULTIPLE_SENSOR_LOCATIONS_SUPPORTED_TRUE = 1, 
} enum_cycling_power_feature_multiple_sensor_locations_supported_t;

typedef enum
{ 
    CRANK_LENGTH_ADJUSTMENT_SUPPORTED__FALSE = 0, 
    CRANK_LENGTH_ADJUSTMENT_SUPPORTED__TRUE = 1, 
} enum_cycling_power_feature_crank_length_adjustment_supported__t;

typedef enum
{ 
    CHAIN_LENGTH_ADJUSTMENT_SUPPORTED_FALSE = 0, 
    CHAIN_LENGTH_ADJUSTMENT_SUPPORTED_TRUE = 1, 
} enum_cycling_power_feature_chain_length_adjustment_supported_t;

typedef enum
{ 
    CHAIN_WEIGHT_ADJUSTMENT_SUPPORTED_FALSE = 0, 
    CHAIN_WEIGHT_ADJUSTMENT_SUPPORTED_TRUE = 1, 
} enum_cycling_power_feature_chain_weight_adjustment_supported_t;

typedef enum
{ 
    SPAN_LENGTH_ADJUSTMENT_SUPPORTED_FALSE = 0, 
    SPAN_LENGTH_ADJUSTMENT_SUPPORTED_TRUE = 1, 
} enum_cycling_power_feature_span_length_adjustment_supported_t;

typedef enum
{ 
    SENSOR_MEASUREMENT_CONTEXT_FORCE_BASED = 0, 
    SENSOR_MEASUREMENT_CONTEXT_TORQUE_BASED = 1, 
} enum_cycling_power_feature_sensor_measurement_context_t;

typedef enum
{ 
    INSTANTANEOUS_MEASUREMENT_DIRECTION_SUPPORTED_FALSE = 0, 
    INSTANTANEOUS_MEASUREMENT_DIRECTION_SUPPORTED_TRUE = 1, 
} enum_cycling_power_feature_instantaneous_measurement_direction_supported_t;

typedef enum
{ 
    FACTORY_CALIBRATION_DATE_SUPPORTED_FALSE = 0, 
    FACTORY_CALIBRATION_DATE_SUPPORTED_TRUE = 1, 
} enum_cycling_power_feature_factory_calibration_date_supported_t;

typedef enum
{ 
    ENHANCED_OFFSET_COMPENSATION_SUPPORTED_FALSE = 0, 
    ENHANCED_OFFSET_COMPENSATION_SUPPORTED_TRUE = 1, 
} enum_cycling_power_feature_enhanced_offset_compensation_supported_t;

typedef enum
{ 
    DISTRIBUTE_SYSTEM_SUPPORT_UNSPECIFIED__LEGACY_SENSOR_ = 0, 
    DISTRIBUTE_SYSTEM_SUPPORT_NOT_FOR_USE_IN_A_DISTRIBUTED_SYSTEM = 1, 
    DISTRIBUTE_SYSTEM_SUPPORT_CAN_BE_USED_IN_A_DISTRIBUTED_SYSTEM = 2, 
    DISTRIBUTE_SYSTEM_SUPPORT_RFU = 3, 
} enum_cycling_power_feature_distribute_system_support_t;

typedef struct
{
    enum_cycling_power_feature_pedal_power_balance_supported_t pedal_power_balance_supported; 
    enum_cycling_power_feature_accumulated_torque_supported_t accumulated_torque_supported; 
    enum_cycling_power_feature_wheel_revolution_data_supported_t wheel_revolution_data_supported; 
    enum_cycling_power_feature_crank_revolution_data_supported_t crank_revolution_data_supported; 
    enum_cycling_power_feature_extreme_magnitudes_supported_t extreme_magnitudes_supported; 
    enum_cycling_power_feature_extreme_angles_supported_t extreme_angles_supported; 
    enum_cycling_power_feature_top_and_bottom_dead_spot_angles_supported_t top_and_bottom_dead_spot_angles_supported; 
    enum_cycling_power_feature_accumulated_energy_supported_t accumulated_energy_supported; 
    enum_cycling_power_feature_offset_compensation_indicator_supported_t offset_compensation_indicator_supported; 
    enum_cycling_power_feature_offset_compensation_supported_t offset_compensation_supported; 
    enum_cycling_power_feature_cycling_power_measurement_characteristic_content_masking_supported_t cycling_power_measurement_characteristic_content_masking_supported; 
    enum_cycling_power_feature_multiple_sensor_locations_supported_t multiple_sensor_locations_supported; 
    enum_cycling_power_feature_crank_length_adjustment_supported__t crank_length_adjustment_supported_; 
    enum_cycling_power_feature_chain_length_adjustment_supported_t chain_length_adjustment_supported; 
    enum_cycling_power_feature_chain_weight_adjustment_supported_t chain_weight_adjustment_supported; 
    enum_cycling_power_feature_span_length_adjustment_supported_t span_length_adjustment_supported; 
    enum_cycling_power_feature_sensor_measurement_context_t sensor_measurement_context; 
    enum_cycling_power_feature_instantaneous_measurement_direction_supported_t instantaneous_measurement_direction_supported; 
    enum_cycling_power_feature_factory_calibration_date_supported_t factory_calibration_date_supported; 
    enum_cycling_power_feature_enhanced_offset_compensation_supported_t enhanced_offset_compensation_supported; 
    enum_cycling_power_feature_distribute_system_support_t distribute_system_support; 
} cycling_power_feature_cycling_power_feature_t; 
typedef enum
{ 
    SENSOR_LOCATION_OTHER = 0, 
    SENSOR_LOCATION_TOP_OF_SHOE = 1, 
    SENSOR_LOCATION_IN_SHOE = 2, 
    SENSOR_LOCATION_HIP = 3, 
    SENSOR_LOCATION__FRONT_WHEEL = 4, 
    SENSOR_LOCATION_LEFT_CRANK = 5, 
    SENSOR_LOCATION_RIGHT_CRANK = 6, 
    SENSOR_LOCATION_LEFT_PEDAL = 7, 
    SENSOR_LOCATION_RIGHT_PEDAL = 8, 
    SENSOR_LOCATION__FRONT_HUB = 9, 
    SENSOR_LOCATION_REAR_DROPOUT = 10, 
    SENSOR_LOCATION_CHAINSTAY = 11, 
    SENSOR_LOCATION_REAR_WHEEL = 12, 
    SENSOR_LOCATION_REAR_HUB = 13, 
    SENSOR_LOCATION_CHEST = 14, 
    SENSOR_LOCATION_SPIDER = 15, 
    SENSOR_LOCATION_CHAIN_RING = 16, 
} enum_sensor_location_t; 
typedef struct
{
    enum_sensor_location_t sensor_location; 
} sensor_location_sensor_location_t; 
typedef enum
{ 
    FIRST_CRANK_MEASUREMENT_ANGLE_PRESENT_FALSE = 0, 
    FIRST_CRANK_MEASUREMENT_ANGLE_PRESENT_TRUE = 1, 
} enum_flags_first_crank_measurement_angle_present_t;

typedef enum
{ 
    INSTANTANEOUS_FORCE_MAGNITUDE_ARRAY_PRESENT_FALSE = 0, 
    INSTANTANEOUS_FORCE_MAGNITUDE_ARRAY_PRESENT_TRUE = 1, 
} enum_flags_instantaneous_force_magnitude_array_present_t;

typedef enum
{ 
    INSTANTANEOUS_TORQUE_MAGNITUDE_ARRAY_PRESENT_FALSE = 0, 
    INSTANTANEOUS_TORQUE_MAGNITUDE_ARRAY_PRESENT_TRUE = 1, 
} enum_flags_instantaneous_torque_magnitude_array_present_t;

typedef enum
{ 
    INSTANTANEOUS_MEASUREMENT_DIRECTION_UNKNOWN = 0, 
    INSTANTANEOUS_MEASUREMENT_DIRECTION_TANGENTIAL_COMPONENT = 1, 
    INSTANTANEOUS_MEASUREMENT_DIRECTION_RADIAL_COMPONENT = 2, 
    INSTANTANEOUS_MEASUREMENT_DIRECTION_LATERAL_COMPONENT = 3, 
} enum_flags_instantaneous_measurement_direction_t;

typedef struct
{
    enum_flags_crank_revolution_data_present_t crank_revolution_data_present; 
    enum_flags_first_crank_measurement_angle_present_t first_crank_measurement_angle_present; 
    enum_flags_instantaneous_force_magnitude_array_present_t instantaneous_force_magnitude_array_present; 
    enum_flags_instantaneous_torque_magnitude_array_present_t instantaneous_torque_magnitude_array_present; 
    enum_flags_instantaneous_measurement_direction_t instantaneous_measurement_direction; 
} cycling_power_vector_flags_t; 
typedef enum
{ 
    OP_CODES_SET_CUMULATIVE_VALUE = 1, 
    OP_CODES_UPDATE_SENSOR_LOCATION = 2, 
    OP_CODES_REQUEST_SUPPORTED_SENSOR_LOCATIONS = 3, 
    OP_CODES_SET_CRANK_LENGTH = 4, 
    OP_CODES_REQUEST_CRANK_LENGTH = 5, 
    OP_CODES_SET_CHAIN_LENGTH = 6, 
    OP_CODES_REQUEST_CHAIN_LENGTH = 7, 
    OP_CODES_SET_CHAIN_WEIGHT = 8, 
    OP_CODES_REQUEST_CHAIN_WEIGHT = 9, 
    OP_CODES_SET_SPAN_LENGTH = 10, 
    OP_CODES_REQUEST_SPAN_LENGTH = 11, 
    OP_CODES_START_OFFSET_COMPENSATION = 12, 
    OP_CODES_MASK_CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_CONTENT = 13, 
    OP_CODES_REQUEST_SAMPLING_RATE = 14, 
    OP_CODES_REQUEST_FACTORY_CALIBRATION_DATE = 15, 
    OP_CODES_START_ENHANCED_OFFSET_COMPENSATION = 16, 
    OP_CODES_RESPONSE_CODE = 32, 
} enum_op_codes_t; 
typedef struct
{
    enum_op_codes_t op_codes; 
} cycling_power_control_point_op_codes_t; 
typedef enum
{ 
    RESPONSE_VALUE_SUCCESS = 1, 
    RESPONSE_VALUE_OP_CODE_NOT_SUPPORTED = 2, 
    RESPONSE_VALUE_INVALID_PARAMETER = 3, 
    RESPONSE_VALUE_OPERATION_FAILED = 4, 
} enum_response_value_t; 
typedef struct
{
    enum_response_value_t response_value; 
} cycling_power_control_point_response_value_t; 


/**@brief Cycling Power Measurement structure. */
typedef struct
{
    cycling_power_measurement_flags_t flags;
    int16_t instantaneous_power;
    uint8_t pedal_power_balance;
    uint16_t accumulated_torque;
    uint32_t wheel_revolution_data___cumulative_wheel_revolutions;
    uint16_t wheel_revolution_data___last_wheel_event_time;
    uint16_t crank_revolution_data__cumulative_crank_revolutions;
    uint16_t crank_revolution_data__last_crank_event_time;
    int16_t extreme_force_magnitudes___maximum_force_magnitude;
    int16_t extreme_force_magnitudes___minimum_force_magnitude;
    int16_t extreme_torque_magnitudes__maximum_torque_magnitude;
    int16_t extreme_torque_magnitudes__minimum_torque_magnitude;
    uint8_array_t extreme_angles___maximum_angle;
    uint8_array_t extreme_angles___minimum_angle;
    uint16_t top_dead_spot_angle;
    uint16_t bottom_dead_spot_angle;
    uint16_t accumulated_energy;
    ble_cps_server_characteristic_configuration_t server_characteristic_configuration; 
} ble_cps_cycling_power_measurement_t;
/**@brief Cycling Power Feature structure. */
typedef struct
{
    cycling_power_feature_cycling_power_feature_t cycling_power_feature;
} ble_cps_cycling_power_feature_t;
/**@brief Sensor Location structure. */
typedef struct
{
    sensor_location_sensor_location_t sensor_location;
} ble_cps_sensor_location_t;
/**@brief Cycling Power Vector structure. */
typedef struct
{
    cycling_power_vector_flags_t flags;
    uint16_t crank_revolution_data___cumulative_crank_revolutions;
    uint16_t crank_revolution_data___last_crank_event_time;
    uint16_t first_crank_measurement_angle_;
    int16_t instantaneous_force_magnitude_array;
    int16_t instantaneous_torque_magnitude_array;
} ble_cps_cycling_power_vector_t;
/**@brief Cycling Power Control Point structure. */
typedef struct
{
    cycling_power_control_point_op_codes_t op_codes;
    uint8_array_t parameter_value;
    uint8_t request_op_code;
    cycling_power_control_point_response_value_t response_value;
    uint8_array_t response_parameter;
} ble_cps_cycling_power_control_point_t;

/**@brief Cycling Power Service event. */
typedef struct
{
    ble_cps_evt_type_t evt_type;    /**< Type of event. */
    union {
        uint16_t cccd_value; /**< Holds decoded data in Notify and Indicate event handler. */
        ble_cps_cycling_power_control_point_t cycling_power_control_point; /**< Holds decoded data in Write event handler. */
    } params;
} ble_cps_evt_t;

/**@brief Cycling Power Service event handler type. */
typedef void (*ble_cps_evt_handler_t) (ble_cps_t * p_cps, ble_cps_evt_t * p_evt);

/**@brief Cycling Power Service init structure. This contains all options and data needed for initialization of the service */
typedef struct
{
    ble_cps_evt_handler_t     evt_handler; /**< Event handler to be called for handling events in the Cycling Power Service. */
    ble_cps_cycling_power_measurement_t ble_cps_cycling_power_measurement_initial_value; /**< If not NULL, initial value of the Cycling Power Measurement characteristic. */ 
    ble_cps_cycling_power_feature_t ble_cps_cycling_power_feature_initial_value; /**< If not NULL, initial value of the Cycling Power Feature characteristic. */ 
    ble_cps_sensor_location_t ble_cps_sensor_location_initial_value; /**< If not NULL, initial value of the Sensor Location characteristic. */ 
    ble_cps_cycling_power_vector_t ble_cps_cycling_power_vector_initial_value; /**< If not NULL, initial value of the Cycling Power Vector characteristic. */ 
    ble_cps_cycling_power_control_point_t ble_cps_cycling_power_control_point_initial_value; /**< If not NULL, initial value of the Cycling Power Control Point characteristic. */ 
} ble_cps_init_t;

/**@brief Cycling Power Service structure. This contains various status information for the service.*/
struct ble_cps_s
{
    ble_cps_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the Cycling Power Service. */
    uint16_t service_handle; /**< Handle of Cycling Power Service (as provided by the BLE stack). */
    ble_gatts_char_handles_t cycling_power_measurement_handles; /**< Handles related to the Cycling Power Measurement characteristic. */
    ble_gatts_char_handles_t server_characteristic_configuration_handles; /**< Handles related to the Server Characteristic Configuration descriptor. */
    ble_gatts_char_handles_t cycling_power_feature_handles; /**< Handles related to the Cycling Power Feature characteristic. */
    ble_gatts_char_handles_t sensor_location_handles; /**< Handles related to the Sensor Location characteristic. */
    ble_gatts_char_handles_t cycling_power_vector_handles; /**< Handles related to the Cycling Power Vector characteristic. */
    ble_gatts_char_handles_t cycling_power_control_point_handles; /**< Handles related to the Cycling Power Control Point characteristic. */
    uint16_t conn_handle; /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
};

/**@brief Function for initializing the Cycling Power.
 *
 * @param[out]  p_cps       Cycling Power Service structure. This structure will have to be supplied by
 *                          the application. It will be initialized by this function, and will later
 *                          be used to identify this particular service instance.
 * @param[in]   p_cps_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_cps_init(ble_cps_t * p_cps, const ble_cps_init_t * p_cps_init);

/**@brief Function for handling the Application's BLE Stack events.*/
void ble_cps_on_ble_evt(ble_cps_t * p_cps, ble_evt_t * p_ble_evt);

/**@brief Function for sending the Cycling Power Measurement.
 *
 * @details The application calls this function after having performed a cycling power measurement.
 *          The cycling power measurement data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_cps                    Cycling Power Service structure.
 * @param[in]   p_cycling_power_measurement               New cycling power measurement.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_cps_cycling_power_measurement_send(ble_cps_t * p_cps, ble_cps_cycling_power_measurement_t * p_cycling_power_measurement);

/**@brief Function for setting the Server Characteristic Configuration.
 *
 * @details Sets a new value of the Server Characteristic Configuration descriptor. The new value will be sent
 *          to the client the next time the client reads the Server Characteristic Configuration descriptor.
 *          This function is only generated if the descriptor's Read property is not 'Excluded'.
 *
 * @param[in]   p_cps                 Cycling Power Service structure.
 * @param[in]   p_server_characteristic_configuration  New Server Characteristic Configuration.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_cps_server_characteristic_configuration_set(ble_cps_t * p_cps, ble_cps_server_characteristic_configuration_t * p_server_characteristic_configuration);

/**@brief Function for setting the Cycling Power Feature.
 *
 * @details Sets a new value of the Cycling Power Feature characteristic. The new value will be sent
 *          to the client the next time the client reads the Cycling Power Feature characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_cps                 Cycling Power Service structure.
 * @param[in]   p_cycling_power_feature  New Cycling Power Feature.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_cps_cycling_power_feature_set(ble_cps_t * p_cps, ble_cps_cycling_power_feature_t * p_cycling_power_feature);

/**@brief Function for setting the Sensor Location.
 *
 * @details Sets a new value of the Sensor Location characteristic. The new value will be sent
 *          to the client the next time the client reads the Sensor Location characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_cps                 Cycling Power Service structure.
 * @param[in]   p_sensor_location  New Sensor Location.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_cps_sensor_location_set(ble_cps_t * p_cps, ble_cps_sensor_location_t * p_sensor_location);

/**@brief Function for sending the Cycling Power Vector.
 *
 * @details The application calls this function after having performed a cycling power vector.
 *          The cycling power vector data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_cps                    Cycling Power Service structure.
 * @param[in]   p_cycling_power_vector               New cycling power vector.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_cps_cycling_power_vector_send(ble_cps_t * p_cps, ble_cps_cycling_power_vector_t * p_cycling_power_vector);

/**@brief Function for sending the Cycling Power Control Point.
 *
 * @details The application calls this function after having performed a cycling power control point.
 *          The cycling power control point data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_cps                    Cycling Power Service structure.
 * @param[in]   p_cycling_power_control_point               New cycling power control point.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_cps_cycling_power_control_point_send(ble_cps_t * p_cps, ble_cps_cycling_power_control_point_t * p_cycling_power_control_point);

#endif //_BLE_CPS_H__
